function XinRanAnalysis2_Sweep(varargin)
% Xintrinsic continuous sweep based session analysis
%   S.TrlNumTotal is supposed to be 1
%   Stimulation is supposed to vary a feature continuously in a cycle

global A D T
%% Get preprocessed ('*_P?.mat') file
if nargin ==0
    % Calling from direct running of the function
    A.RunningSource =   'D';
    [A.FileName, F.PathName, A.FilterIndex] = uigetfile(...
                        'W:\*_P?.mat',...
                        'Select a "_P1.mat" file to process');
    if A.FilterIndex == 0
        clear A;
        return
    end
    if iscell(A.FileName) == 0  % single file selected
        A.FileName =    {A.FileName};
    end
else
    A.RunningSource =   'S';
    % Calling from another script
    [F.PathName, A.FileName, A.FileExt] = fileparts(varargin{1});
    F.PathName =        [F.PathName, '\'];
    A.FileName =        {[A.FileName, A.FileExt]};
end
%% Load data files
Xin.T.filename = [F.PathName, A.FileName{1}];      
load([Xin.T.filename(1:end-7) '.mat'], 'S');	% load S (Saved from recording)
load([Xin.T.filename(1:end-4) '.mat'], 'P');	% load P (Preprocessed)  
if S.TrlNumTotal == 1
    disp([  'Analyzing session: "', A.FileName{1}, ...
            '" with the sound: "', S.SesSoundFile, '"']);
else
    disp([  'Session: "', A.FileName{1}, ...
            '" with the sound: "', S.SesSoundFile, '" is not a Sweep based session.']);
    return
end
%% Figure: ROI
T.AxesSS =                  [60 90];    % Axes, Space for the Side
T.AxesSB =                  10;         % Axes, Space in Between
T.AxesSCB =                 60;         % Axes, Space for ColorBar

    T.hFig1 = figure(...
                    'Name',         ['Determine the ROI in the session "', A.FileName{1}(1:end-7), '"'],...
                    'Units',        'pixels',...  
                    'Position',     [   10                      10....
                                        T.AxesSS(1)*2+P.ProcPixelWidth*5 ...
                                        T.AxesSS(2)*2+P.ProcPixelHeight*5 ]);
    T.hFig1Axes1 = axes(...
                    'Parent',       T.hFig1,...
                    'Units',        'pixels',...  
                    'Position',     [   T.AxesSS(1)           T.AxesSS(2)...
                                        P.ProcPixelWidth*5      P.ProcPixelHeight*5 ]);
	T.hFig1Axes1Image1 = imagesc(	squeeze(P.ProcDataMat(1,1,:,:,1)) + ...             
                                    squeeze(P.ProcDataMat(end,end,:,:,end)),...
                    'Parent',       T.hFig1Axes1);    
	colormap(T.hFig1Axes1,          'gray');
    title(                       	'Drag to position the ROI, double click on the circle to finish');
    try 
        if strcmp(S.MkyPrep, 'Skull')
            T.hFig1Axes1ROI = imellipse(gca, [  0	0	120	75]);
        else
            T.hFig1Axes1ROI = imellipse(gca, [  23	0	76	76]);
        end
    catch
            T.hFig1Axes1ROI = imellipse(gca, [  23	0	76	76]);            
    end 
    if A.RunningSource == 'D'
        wait(T.hFig1Axes1ROI);
    end
    title(                          'Done, start calculating...');
    drawnow;
%% Setup Parmateters: Data & Numbers 
D.N_Ph =            P.ProcPixelHeight;      % Number_PixelHeight
D.N_Pw =            P.ProcPixelWidth;       % Number_PixelWidth
D.N_Pt =            D.N_Ph * D.N_Pw;        % Number_PixelTotal(in each frame in the P?.mat)

D.N_Ft =            P.ProcFrameNumTotal;            % Number_FrameTotal
D.N_Fpc =           D.N_Ft / S.SesCycleNumTotal;	% Number_FramePerCycle
D.N_Fpt =           D.N_Fpc / S.TrlNumTotal;        % Number_FramePerTrial
D.N_Ftpreoff =      round(  S.TrlDurPreStim *               P.ProcFrameRate); 
                                                    % Number_FrameTrialPrestimOff
D.N_Ftstimon =      D.N_Ftpreoff + 1;               % Number_FrameTrialStimOn
D.N_Ftstimoff =     round(( S.TrlDurPreStim+S.TrlDurStim) * P.ProcFrameRate);
                                                    % Number_FrameTrialStimOff
D.N_Ftposton =      D.N_Ftstimoff + 1;              % Number_FrameTrialPostimON
try
    if S.SysCamFrameRate ~=80
        D.N_Fps =	S.SysCamFrameRate/P.ProcFrameBinNum;	% Number_FramePerSecond
    else
        D.N_Fps =	80/P.ProcFrameBinNum;
    end
catch
        D.N_Fps =	80/P.ProcFrameBinNum;
end
    % Not necessary
    D.N_Tt =            S.TrlNumTotal;          % Number_TrialTotal (per cycle)
D.N_Ct =            S.SesCycleNumTotal;     % Number_CycleTotal (in the session)
                        
% Region of Interest
D.PhPw_ROIin =          createMask(T.hFig1Axes1ROI);            % ROI in
D.PhPw_ROIout =         ~D.PhPw_ROIin;                          % ROI out
D.Pt_ROIin =            reshape(D.PhPw_ROIin,     D.N_Pt, []);  % ROI in 
D.Pt_ROIout =           reshape(D.PhPw_ROIout,    D.N_Pt, []);  % ROI out
D.PtIndex_ROIin =       find(D.Pt_ROIin);

% Temporal Analysis

% Spectral AnalysisFpt
D.N_Qt =                D.N_Ft;         % Number_FrequencyTotal
D.N_Qfc =               D.N_Ct +1;      % Number_FrequencyOfTheCycle  
D.Qt_Freqs =            0:  1/(D.N_Ft/D.N_Fps): (D.N_Ft-1)/(D.N_Ft/D.N_Fps); 
T.PtQt_ROIin =          D.Pt_ROIin *     ones(1,   length(D.Qt_Freqs));    
T.PtQt_ROIout =         D.Pt_ROIout *    ones(1,   length(D.Qt_Freqs));

% Data                                  % ProcDataMat:(Ct, Tt, Ph, Pw, Fpt)         
T.PhPwFptCt_DataRaw =   squeeze(permute(P.ProcDataMat, [3 4 5 2 1]));
T.PtFt_Raw =            reshape(T.PhPwFptCt_DataRaw,	D.N_Pt,	D.N_Ft);          
T.CtTtFptPhPw_DataRaw =         permute(P.ProcDataMat, [1 2 5 3 4]);

%% Variance Analysis 
D.Fig2Var{1}.Title =        'Average intensity (% to saturation)';
D.Fig2Var{1}.PhPw_Data =	squeeze(mean(mean(mean(T.CtTtFptPhPw_DataRaw, 1), 2), 3)) / ...
                            (2^12 *4^2 *P.ProcPixelBinNum^2 *P.ProcFrameBinNum);
D.Fig2Var{1}.ColorMap =     'hot';  

D.Fig2Var{2}.Title =        'STD, entire session (ratio)';
D.Fig2Var{2}.PhPw_Data =	squeeze(std(reshape(T.CtTtFptPhPw_DataRaw, D.N_Ft, D.N_Ph, D.N_Pw), 0, 1))./...
                                squeeze(mean(mean(mean(T.CtTtFptPhPw_DataRaw, 1), 2), 3)) ;
D.Fig2Var{2}.ColorMap =     'parula';

D.Fig2Var{3}.Title =        'STD, across repetition cycles (ratio)';
D.Fig2Var{3}.PhPw_Data =	squeeze(std(mean(mean(T.CtTtFptPhPw_DataRaw, 2), 3), 0, 1))./...
                                squeeze(mean(mean(mean(T.CtTtFptPhPw_DataRaw, 1), 2), 3)) ;
D.Fig2Var{3}.ColorMap =     'parula';    

D.Fig2Var{4}.Title =        'STD, across different trials (ratio)';
D.Fig2Var{4}.PhPw_Data =	squeeze(std(mean(mean(T.CtTtFptPhPw_DataRaw, 1), 3), 0, 2))./...
                                squeeze(mean(mean(mean(T.CtTtFptPhPw_DataRaw, 1), 2), 3)) ;
D.Fig2Var{4}.ColorMap =     'parula';    

D.Fig2Var{5}.Title =        'STD, across frames within each trial (ratio)';
D.Fig2Var{5}.PhPw_Data =	squeeze(std(mean(mean(T.CtTtFptPhPw_DataRaw, 1), 2), 0, 3))./...
                                squeeze(mean(mean(mean(T.CtTtFptPhPw_DataRaw, 1), 2), 3)) ;
D.Fig2Var{5}.ColorMap =     'parula'; 

%% Trial Analysis
switch D.N_Tt
%         case 5;     T.TrialOrder = [5 3 1 4 2];
%         case 7;     T.TrialOrder = [7 4 1 5 2 6 3];
    otherwise;  T.TrialOrder = 1:D.N_Tt;
end
% Pixel nomalized in the session by the mean of all frames 
D.PtOne_MeanForEachPixel =	mean(T.PtFt_Raw, 2);
D.PtFt_NormSes =            T.PtFt_Raw./(D.PtOne_MeanForEachPixel*...
                                ones(1, D.N_Ft)) - 1;
D.FptTtCtPhPw_NormSes =	permute( reshape(D.PtFt_NormSes, ...
                                    D.N_Ph, ...
                                    D.N_Pw, ...
                                    D.N_Fpt, ...
                                    D.N_Tt, ...
                                    D.N_Ct), [3, 4, 5, 1, 2]);
% Pixel nomalized in the session by the mean of prestim/all frames 
if D.N_Ftpreoff >0
    D.OneTtCtPhPw_PreMean =    mean( D.FptTtCtPhPw_NormSes(...
                                        1:D.N_Ftpreoff, :, :, :, :), 1);    % with pre-stim time as baseline
else
    D.OneTtCtPhPw_PreMean =    mean( D.FptTtCtPhPw_NormSes(...
                                        1:end, :, :, :, :), 1);             % continuous, so total average us baseline
end
D.FptTtCtPhPw_NormTrl =	(D.FptTtCtPhPw_NormSes+1)./...
                                (repmat(D.OneTtCtPhPw_PreMean, D.N_Fpt,1,1,1,1)+1) -1;
D.FptCtPhPw_NormTrl =	squeeze(D.FptTtCtPhPw_NormTrl);
D.FptPhPw_NormTrlM =	squeeze(mean(D.FptTtCtPhPw_NormTrl, 3));
D.FptTtPt_NormTrlM =	reshape(D.FptPhPw_NormTrlM,...
                                    D.N_Fpt, ...
                                    D.N_Tt, ...
                                    D.N_Pt);  

T.TempLimMin =  min(min(min(D.FptTtPt_NormTrlM(:,:,:)))); 
T.TempLimMax =  max(max(max(D.FptTtPt_NormTrlM(:,:,:)))); 

T.PsuedoDelay =             2.6;
T.length =                  100;    % not 20s option?

switch A.FileName{1}([15:17 end-15:end-7])
    case 'NIR_Ring_PBS';    T.Polarity =    -1;     T.max = 0.05;
    case 'NIR_Pola_PBS';    T.Polarity =    -1;     T.max = 0.05;
    case 'Far_Pola_PBS';    T.Polarity =     1;     T.max = 0.05;
    case 'FRe_Pola_PBS';    T.Polarity =     1;     T.max = 0.05;
    case 'Red_Pola_PBS';    T.Polarity =     1;     T.max = 0.05;
    case 'Yel_Pola_PBS';    T.Polarity =     1;     T.max = 0.05;
    case 'Amb_Pola_PBS';    T.Polarity =     1;     T.max = 0.05;
    case 'Gre_Pola_PBS';    T.Polarity =    -1;     T.max = 0.05;
    case 'Blu_Pola_PBS';    T.Polarity =    -1;     T.max = 0.05;
    case 'Blu_Fluo_GFP';    T.Polarity =     1;     T.max = 0.10;    T.PsuedoDelay = 0.8 - 0.8;
    otherwise;              T.Polarity =     1;     T.max = 0.05; 
end
T.max = T.max/10;

if  strcmp(S.SesSoundFile(1:10),    'TonePipSeq') || ...
    strcmp(S.SesSoundFile(1:11),    'NoisePipSeq') || ...
    strcmp(S.SesSoundFile(1:5),     'Music')    
        T.length =      D.N_Fpt;
end
D.PtIndex_STD =        squeeze(std(D.FptTtPt_NormTrlM(:,1,D.PtIndex_ROIin), 1));
D.FptPhPw_NormTrlVid = D.FptPhPw_NormTrlM*T.Polarity;

%% Spectral Analysis  
% %  Power Meter: To be finished
% interpolate 0s
% T.OneFrt_PMRawZero =    (P.RawMeanPower == 0);
% if sum(P.RawMeanPower == 0) ~=0
%     % if 
% else
%     T.OneFt_PowerRaw =  P.ProcMeanPower;
% end
% T.OneFt_PowerRaw =  P.ProcMeanPower;
% T.OneQt_PowerFFTRaw =   fft(T.OneFt_PowerRaw);
% T.OneQt_PowerFFTAmp =   abs(T.OneQt_PowerFFTRaw)*2/length(D.Qt_Freqs);

% the normalized FFT
D.PtQt_FFTRaw =	fft(T.Polarity * D.PtFt_NormSes')';     
D.PtQt_FFTAmp =	abs(        D.PtQt_FFTRaw)*sqrt(2)/D.N_Qt;	
                                % Amp: mirror combined, thus sqrt(2)
D.PtQt_FFTAgl =	mod(angle(	D.PtQt_FFTRaw)- ...
                    T.PsuedoDelay*ones(D.N_Pt,1)*D.Qt_Freqs*2*pi, 2*pi);
                                % Agl: phase in [0, 2*pi], with
                                % pseudo-delay compensated
if contains(lower(S.SesSoundFile), 'down')
    D.PtQt_FFTAgl =	2*pi - D.PtQt_FFTAgl;
end                             % Reverse the angle for DOWN cycle 
% collapse across pixels
D.OneQt_FFTAmpMeanOut = sum(D.PtQt_FFTAmp.*T.PtQt_ROIout)/  sum(D.Pt_ROIout);
D.OneQt_FFTAmpMeanIn =	sum(D.PtQt_FFTAmp.*T.PtQt_ROIin)/   sum(D.Pt_ROIin);
D.OneQt_FFTAmpMaxIn =	max(D.PtQt_FFTAmp.*T.PtQt_ROIin);
D.OneQt_FFTAmpStdIn =	std(D.PtQt_FFTAmp(D.PtIndex_ROIin,:),1);
D.OneQt_FFTAmpMeanPStdIn = D.OneQt_FFTAmpMeanIn + D.OneQt_FFTAmpStdIn;
if D.N_Tt == 1
    T.FFTXTick =    [1/S.SesSoundDurTotal                   80/P.ProcFrameBinNum/2];
else
    T.FFTXTick =	[1/S.SesSoundDurTotal	1/S.TrlDurTotal	80/P.ProcFrameBinNum/2];
end

% the locking frequency, Prepare the raw hue, sat, val
    D.PtOne_Hue =           D.PtQt_FFTAgl(:,D.N_Qfc)/(2*pi);
    % S.TrlDurPreStim =   2.5;
    % S.TrlDurStim =      15;
    D.PtOne_Hue =           (D.PtOne_Hue-S.TrlDurPreStim/S.TrlDurTotal) /...
                                (S.TrlDurStim/S.TrlDurTotal);
                            % match the Stimulus ONSET / OFFSET to 0-1
    D.PtOne_Saturation =	ones(D.N_Pt,1);          
    D.PtOne_Value =         D.PtQt_FFTAmp(:,D.N_Qfc); 

    D.PhPwThree_TuneMap =   zeros(D.N_Ph, D.N_Pw,3);

%% Graphics

delete(T.hFig1);
T.hFig(2) = figure(...
                'Name',         ['"', A.FileName{1}, '" with the sound: "', S.SesSoundFile, '"'],...
                'Units',        'pixels',...  
                'Position',     [   10                      10 ...
                                    1600                    900]); 
% Varience Analysis
% Figure
T.VarMag =                  2;
T.SpecMag =                 3;

T.AxesSS =                  [60 90];    % Axes, Space for the Side
T.AxesSB =                  10;         % Axes, Space in Between
T.AxesSCB =                 60;         % Axes, Space for ColorBar

T.N_IntScaleLim =           [0 1];
T.N_StdScaleLim =           [0.0001,  0.1];
T.N_StdScaleLimLog =        log10(T.N_StdScaleLim);
T.N_StdScaleTickLog =       T.N_StdScaleLimLog(1):1:T.N_StdScaleLimLog(2);
T.N_StdScaleTickLabels =	cellfun(@num2str, num2cell(10.^T.N_StdScaleTickLog),...
                            'UniformOutput',    false); 
for j = 1:5
    T.AxesNumH =    j;
    T.AxesNumV =	1;
    T.hFig2AxesVar(j) = axes(...
                'Parent',       T.hFig(2),...
                'Units',        'pixels',...  
                'Position',     [   T.AxesSS(1) + (T.AxesSCB + D.N_Pw*T.VarMag)*(T.AxesNumH-1), ...
                                    T.AxesSS(2) +  T.AxesSB,...
                                    D.N_Pw*T.VarMag,    D.N_Ph*T.VarMag],...
                'Tag',          [num2str(j), 'Var']);
    if strcmp(D.Fig2Var{j}.Title(1:3), 'STD')
        imagesc(    log10(      D.Fig2Var{j}.PhPw_Data)    );
    else
        imagesc(                D.Fig2Var{j}.PhPw_Data     );
    end
    set(gca,    'XTick',        []);
    set(gca,    'YTick',        []);
    colormap(   T.hFig2AxesVar(j), D.Fig2Var{j}.ColorMap);
    if strcmp(D.Fig2Var{j}.Title(1:3), 'STD')
        caxis(                  T.N_StdScaleLimLog);
    else 
        caxis(                  T.N_IntScaleLim);
    end
    T.hFig2VarColorbar(j) = colorbar(...
                'Units',        'pixels',...
                'Position',     [   T.AxesSS(1) + (T.AxesSCB + D.N_Pw*T.VarMag)*(T.AxesNumH-1) + D.N_Pw*T.VarMag + 10, ...
                                    T.AxesSS(2) +  T.AxesSB,...
                                    10                      D.N_Ph*T.VarMag]);                     
    if strcmp(D.Fig2Var{j}.Title(1:3), 'STD')
        set(T.hFig2VarColorbar(j),...
                'Ticks',        T.N_StdScaleTickLog,...
                'TickLabels',   T.N_StdScaleTickLabels);
    else
        set(T.hFig2VarColorbar(j),...
                'Ticks',        0:0.2:1,...
                'TickLabels',   {'0%', '20', '40', '60', '80', '100'});

    end
    title(D.Fig2Var{j}.Title);
    xlabel( {[  'Max for all:  ',	sprintf('%5.2f%%', max(max(D.Fig2Var{j}.PhPw_Data))*100 ) ],...
             [  'Mean inside: ',	sprintf('%5.2f%%', sum(sum(D.Fig2Var{j}.PhPw_Data.*D.PhPw_ROIin))/sum(D.Pt_ROIin)*100 ) ],...
             [  'Min for all:   ',	sprintf('%5.2f%%', min(min(D.Fig2Var{j}.PhPw_Data))*100 ) ]} );
end

%% Axes 1:1, Spectrum
T.hFig2AxesSpec = axes(...
            'Parent',       T.hFig(2),...
            'Units',        'pixels',...                      
            'Position',     [   T.AxesSS(1)*(2  )+D.N_Pw*(0  )*T.SpecMag, ...
                                T.AxesSS(2)*(2  )+D.N_Ph*(0  )*T.SpecMag+D.N_Ph*(1)*T.VarMag, ...
                                D.N_Pw*T.SpecMag	D.N_Ph*T.SpecMag],...
            'NextPlot',     'add');
plot(D.Qt_Freqs, D.OneQt_FFTAmpMeanIn);
plot(D.Qt_Freqs, D.OneQt_FFTAmpMeanOut);
%     plot(D.Qt_Freqs, T.OneQt_PowerFFTAmp);
plot(D.Qt_Freqs, D.OneQt_FFTAmpMeanPStdIn, 'b:');
T.hFig2AxesSpecDot = plot(0.05, 0.02, 'o',...
            'MarkerSize',   5,...
            'Color',        [1 0 0]);
set(gca,    'XTick',        T.FFTXTick,... 
            'XLim',         [80/P.ProcFrameBinNum/D.N_Ft  80/P.ProcFrameBinNum/2],...
            'YLim',         [0 0.02],...
            'YTick',        0.000:0.005:0.20,...
            'YTickLabel',   {'0.0%', '0.5%', '1.0%', '1.5%', '2.0%'},...
            'XGrid',        'on',...
            'XScale',       'log',...
            'LabelFontSizeMultiplier', 1);
xlabel({['Frequency (Hz)']},...
            'Parent',       gca,...
            'VerticalAlignment',    'middle');
title('Spectrum');
%     legend('Inside Mean', 'Outside Mean', 'Power meter', 'Inside Mean+Std',...
%                 'Location',     'Northeast');
legend('Inside Mean', 'Outside Mean', 'Inside Mean+Std',...
            'Location',     'Northeast');
legend('boxoff'); 
T.hFig2AxesSpecHid = axes(...
            'Parent',       T.hFig(2),... 
            'Units',        'pixels',...                        
            'Position',     get(T.hFig2AxesSpec, 'position'),...
            'Color',        'none',...
            'XLim',         [0 1],...
            'YLim',         [0 1],...
            'XTick',        [],...
            'YTick',        []);
T.hFig2AxesSpecTextNum =    text(   0.95,    0.95, sprintf('rep#:%d',20),...
            'Parent',       T.hFig2AxesSpecHid,...
            'FontSize',     8,...
            'HorizontalAlignment',	'right');
T.hFig2AxesSpecTextRight =  text(   0.95,   0.9, '>',...
            'Parent',       T.hFig2AxesSpecHid,...
            'FontSize',     8,...
            'FontWeight',   'Bold',...
            'Tag',          'SpecNumUp',...
            'ButtonDownFcn','XinRanAnalysis2_Sweep_ButtonDown');
T.hFig2AxesSpecTextLeft =   text(   0.05,   0.9, '<',...
            'Parent',       T.hFig2AxesSpecHid,...
            'FontSize',     8,...
            'FontWeight',   'Bold',...
            'Tag',          'SpecNumDown',...
            'ButtonDownFcn','XinRanAnalysis2_Sweep_ButtonDown');
        
%% Axes: 2:1, Phase Histogram
T.hFig2AxesHist = axes(...
            'Parent',       T.hFig(2),...
            'Units',        'pixels',...                      
            'Position',     [   T.AxesSS(1)*(2  )+D.N_Pw*(0  )*T.SpecMag, ...
                                T.AxesSS(2)*(3  )+D.N_Ph*(1  )*T.SpecMag+D.N_Ph*(1)*T.VarMag, ...
                                D.N_Pw*T.SpecMag	D.N_Ph*T.SpecMag],...
            'NextPlot',     'add',...
            'LabelFontSizeMultiplier', 1); 
title('Phase histogram');
T.hFig2AxesHistHistogram = histogram(squeeze(D.PtQt_FFTAgl(:,21)),32,...
            'Parent',       T.hFig2AxesHist);
set(T.hFig2AxesHist,...
            'XLim',         [0 2*pi],...
            'XTick',        (0:0.25:2)*pi,...
            'XTickLabels',  {   '0.00\pi', '0.25\pi', '0.50\pi', '0.75\pi',...
                                '1.00\pi', '1.25\pi', '1.50\pi', '1.75\pi',...
                                '2.00\pi'},...
            'XTickLabelRotation',   45);
xlabel('Phase, uncompensated');
ylabel('Pixel count');

%% Axes: Cycle Tuning Map
T.hFig2AxesTune = axes(...
            'Parent',       T.hFig(2),...
            'Units',        'pixels',...  
            'Position',     [   T.AxesSS(1)*(3  )+D.N_Pw*(1  )*T.SpecMag ...
                                T.AxesSS(2)*(2  )+D.N_Ph*(0  )*T.SpecMag+D.N_Ph*(1)*T.VarMag, ...
                                D.N_Pw*T.SpecMag    D.N_Ph*T.SpecMag],...
            'NextPlot',     'add',...
            'LabelFontSizeMultiplier', 1);   
title('Tuning');
T.hFig2AxesTuneImage = image(T.hFig2AxesTune, D.PhPwThree_TuneMap,...
            'Tag',          'PixlSelectionFromTuneImage',...
            'ButtonDownFcn','XinRanAnalysis2_Sweep_ButtonDown');
set(T.hFig2AxesTune, ...
            'YDir',         'reverse',...
            'XLim',         [1 D.N_Pw],...
            'YLim',         [1 D.N_Ph],...
            'XTick',        [],...
            'YTick',        []);

% Scalebar: Hue
T.hFig2AxesTuneFakeHue = axes(...
            'Parent',       T.hFig(2),...
            'Units',        'pixels',...  
            'Position',     get(T.hFig2AxesTune, 'position'),...
            'Visible',     'off'); 
colormap(   T.hFig2AxesTuneFakeHue, 'hsv');                     caxis( [0 1]);
T.hFig2SpecScalebarHue = colorbar(...
            'peer',         T.hFig2AxesTuneFakeHue,...
            'Units',        'pixels',...
            'Position',     [   T.AxesSS(1)*(3  )+D.N_Pw*(2  )*T.SpecMag+10, ...
                                T.AxesSS(2)*(2  )+D.N_Ph*(0  )*T.SpecMag+D.N_Ph*(1)*T.VarMag, ...
                                10                  D.N_Ph*T.SpecMag],...
            'Ticks',        [],...
            'Tag',          'TuneScalebarHue',...
            'ButtonDownFcn','XinRanAnalysis2_Sweep_ButtonDown');
% Scalebar: Saturation
T.hFig2AxesTuneFakeSat = axes(...
            'Parent',       T.hFig(2),...
            'Units',        'pixels',...  
            'Position',     get(T.hFig2AxesTune, 'position'),...
            'Visible',      'off'); 
colormap(   T.hFig2AxesTuneFakeSat,...
        hsv2rgb([1/3*ones(64,1) (0:1/63:1)' 0.5*ones(64,1)]) );	caxis( [0 1]);
T.hFig2SpecScalebarSat = colorbar(...
            'peer',         T.hFig2AxesTuneFakeSat,...
            'Units',        'pixels',...
            'Position',     [   T.AxesSS(1)*(3  )+D.N_Pw*(2  )*T.SpecMag+40, ...
                                T.AxesSS(2)*(2  )+D.N_Ph*(0  )*T.SpecMag+D.N_Ph*(1)*T.VarMag, ...
                                10                  D.N_Ph*T.SpecMag],...
            'Ticks',        [],...
            'Tag',          'TuneScalebarSat',...
            'ButtonDownFcn','XinRanAnalysis2_Sweep_ButtonDown'); 
% Scalebar: Value
T.hFig2AxesTuneFakeVal = axes(...
            'Parent',       T.hFig(2),...
            'Units',        'pixels',...  
            'Position',     get(T.hFig2AxesTune, 'position'),...
            'Visible',      'off'); 
colormap(   T.hFig2AxesTuneFakeVal,  'gray');     caxis( [0 1]);
T.hFig2SpecScalebarVal = colorbar(...
            'peer',         T.hFig2AxesTuneFakeVal,...
            'Units',        'pixels',...
            'Position',     [   T.AxesSS(1)*(3  )+D.N_Pw*(2  )*T.SpecMag+70, ...
                                T.AxesSS(2)*(2  )+D.N_Ph*(0  )*T.SpecMag+D.N_Ph*(1)*T.VarMag, ...
                                10                  D.N_Ph*T.SpecMag],...
            'Ticks',        [],...
            'Tag',          'TuneScalebarVal',...
            'ButtonDownFcn','XinRanAnalysis2_Sweep_ButtonDown');
     
%% Axes: Temp: Temporal traces for all IN pixels
% 'Average temporal response of a sound cycle';
T.hFig2AxesTemp = axes(...
            'Parent',       T.hFig(2),...
            'Units',        'pixels',...  
            'Position',     [   T.AxesSS(1)*(6  )+D.N_Pw*(2  )*T.SpecMag, ...
                                T.AxesSS(2)*(2  )+D.N_Ph*(0  )*T.SpecMag+D.N_Ph*(1)*T.VarMag, ...
                                D.N_Pw*T.SpecMag,	D.N_Ph*T.SpecMag]);  
plot(   (1:D.N_Fpt)/P.ProcFrameRate,...
        squeeze( D.FptTtPt_NormTrlM(:,1,D.PtIndex_ROIin) )   );
set(gca,    'XLim',         [0 D.N_Fpt/P.ProcFrameRate]);    
if      D.N_Ftpreoff >0 && D.N_Ftposton<D.N_Fpt
    set(gca,'XTick',        [0 D.N_Ftpreoff D.N_Ftstimoff D.N_Fpt]/P.ProcFrameRate); 
elseif	D.N_Ftpreoff >0 
    set(gca,'XTick',        [0 D.N_Ftpreoff D.N_Fpt]/P.ProcFrameRate);
elseif	D.N_Ftposton<D.N_Fpt
    set(gca,'XTick',        [0 D.N_Ftstimoff D.N_Fpt]/P.ProcFrameRate);  
else
    set(gca,'XTick',        [0 D.N_Fpt]/P.ProcFrameRate);
end      
xlabel({['Trial time (s)'],...
        ['Max  STD:  ',	sprintf('%5.2f%%', max(D.PtIndex_STD)*100)],...
        ['Mean STD: ',	sprintf('%5.2f%%', mean(D.PtIndex_STD)*100)] },...
            'Parent',       gca,...
            'VerticalAlignment',    'middle');
ylabel({'Norm. signal, raw polarity'},...
            'Parent',       gca,...
            'VerticalAlignment',    'Middle');
title('Average temporal trace');
set(gca,    'XGrid',        'on',... 
            'LabelFontSizeMultiplier', 1);
T.hFig2AxesTempHid = axes(...
            'Parent',       T.hFig(2),... 
            'Units',        'pixels',...                        
            'Position',     get(T.hFig2AxesTemp, 'position'),...
            'Color',        'none',...
            'XLim',         [0 D.N_Fpt],...
            'YLim',         [0 1],...
            'XTick',        [],...
            'YTick',        [],...
            'NextPlot',     'add');
T.hFig2AxesTempTextNum =    text(   D.N_Fpt*0.05,	0.95, sprintf('Time:%4.1fs',0),...
            'Parent',       T.hFig2AxesTempHid,...
            'FontSize',     8,...
            'HorizontalAlignment',	'Left');
T.hFig2AxesTempTextRight =  text(   D.N_Fpt*0.95,   0.9, '>',...
            'Parent',       T.hFig2AxesTempHid,...
            'FontSize',     8,...
            'FontWeight',   'Bold',...
            'Tag',          'TempFrmeUp',...
            'ButtonDownFcn','XinRanAnalysis2_Sweep_ButtonDown');
T.hFig2AxesTempTextLeft =   text(   D.N_Fpt*0.05,   0.9, '<',...
            'Parent',       T.hFig2AxesTempHid,...
            'FontSize',     8,...
            'FontWeight',   'Bold',...
            'Tag',          'TempFrmeDown',...
            'ButtonDownFcn','XinRanAnalysis2_Sweep_ButtonDown');            
T.hFig2AxesTempDot = plot(1, 1, 'o',...
            'Parent',       T.hFig2AxesTempHid,...
            'MarkerSize',   5,...
            'Color',        [1 0 0]);

%% Axes: Pixl: Temporal traces for a selected pixel
k = 1;  
m = T.TrialOrder(k);
T.hFig2AxesPixl = axes(...
            'Parent',       T.hFig(2),...
            'Units',        'pixels',...  
            'Position',     [   T.AxesSS(1)*(6  )+D.N_Pw*(2  )*T.SpecMag, ...
                                T.AxesSS(2)*(3  )+D.N_Ph*(1  )*T.SpecMag+D.N_Ph*(1)*T.VarMag, ...
                                D.N_Pw*T.SpecMag,	D.N_Ph*T.SpecMag],...
            'NextPlot',     'add');  
T.hFig2AxesPixlLineAll = plot(   (1:D.N_Fpt)/P.ProcFrameRate,...
        squeeze( D.FptTtCtPhPw_NormTrl(:,1,:,37,60) ),...
            'Parent',       T.hFig2AxesPixl,...
            'LineWidth',    0.5);
for i = 1:D.N_Ct
	T.hFig2AxesPixlLineAll(i).Color = ...
        hsv2rgb( [ 0.8*(i-1)/D.N_Ct, 0.8*[1 1] ] );
end
T.hFig2AxesPixlLineMean = plot(   (1:D.N_Fpt)/P.ProcFrameRate,...
        mean(squeeze( D.FptTtCtPhPw_NormTrl(:,1,:,37,60) ),2),...
            'Parent',       T.hFig2AxesPixl,...
            'LineWidth',    2,...
            'Color',        [0 0 0]);
set(gca,    'XLim',         [0 D.N_Fpt/P.ProcFrameRate]);    
if      D.N_Ftpreoff >0 && D.N_Ftposton<D.N_Fpt
    set(gca,'XTick',        [0 D.N_Ftpreoff D.N_Ftstimoff D.N_Fpt]/P.ProcFrameRate); 
elseif	D.N_Ftpreoff >0 
    set(gca,'XTick',        [0 D.N_Ftpreoff D.N_Fpt]/P.ProcFrameRate);
elseif	D.N_Ftposton<D.N_Fpt
    set(gca,'XTick',        [0 D.N_Ftstimoff D.N_Fpt]/P.ProcFrameRate);  
else
    set(gca,'XTick',        [0 D.N_Fpt]/P.ProcFrameRate);
end 
xlabel({['Trial time (s)'],...
        ['Max  STD:  ',	sprintf('%5.2f%%', max(D.PtIndex_STD)*100)],...
        ['Mean STD: ',	sprintf('%5.2f%%', mean(D.PtIndex_STD)*100)] },...
            'Parent',       gca,...
            'VerticalAlignment',    'middle');
ylabel({'Norm. signal, raw polarity'},...
            'Parent',       gca,...
            'VerticalAlignment',    'Middle');
title('Pixel(37H,60W): temporal traces across reps');
set(gca,    'XGrid',        'on',... 
            'LabelFontSizeMultiplier', 1);

%% Axes: Frme: Frame @ each time point        
T.hFig2AxesFrme = axes(...
            'Parent',       T.hFig(2),...
            'Units',        'pixels',...  
            'Position',     [   T.AxesSS(1)*(3  )+D.N_Pw*(1  )*T.SpecMag, ...
                                T.AxesSS(2)*(3  )+D.N_Ph*(1  )*T.SpecMag+D.N_Ph*(1)*T.VarMag, ...
                                D.N_Pw*T.SpecMag,	D.N_Ph*T.SpecMag],...
            'LabelFontSizeMultiplier', 1);  
T.hFig2AxesFrmeImage = imagesc(squeeze(D.FptPhPw_NormTrlVid(1,:,:)),...
            'Parent',       T.hFig2AxesFrme,...
            'Tag',          'PixlSelectionFromFrmeImage',...
            'ButtonDownFcn','XinRanAnalysis2_Sweep_ButtonDown');
T.hFig2AxesFrmeTitle = title('Frame @ a defined time point');   
set(T.hFig2AxesFrmeTitle,...
            'Tag',          'Playback',...
            'ButtonDownFcn','XinRanAnalysis2_Sweep_ButtonDown');
set(T.hFig2AxesFrme,'XTick',        []);
set(T.hFig2AxesFrme,'YTick',        []);            
T.hFig2AxesFrmeXLabelH = xlabel('Adjusted polarity (%) @ 00.0s',...
            'Parent',       gca,...
            'VerticalAlignment',    'Top');
colormap(   T.hFig2AxesFrme, 'jet');
T.hFig2AxesFrmeScalebar = colorbar(...
            'peer',         T.hFig2AxesFrme,...
            'Units',        'pixels',...
            'Position',     [   T.AxesSS(1)*(3  )+D.N_Pw*(2  )*T.SpecMag+10, ...
                                T.AxesSS(2)*(3  )+D.N_Ph*(1  )*T.SpecMag+D.N_Ph*(1)*T.VarMag, ...
                                10,                     D.N_Ph*T.SpecMag],...   
            'Limits',       T.max*[-1 1],...
            'Tag',          'FrmeScalebar',...
            'ButtonDownFcn','XinRanAnalysis2_Sweep_ButtonDown');
set(gca,    'LabelFontSizeMultiplier', 1);

%% Setup Data
% Axes: Spec
setappdata(T.hFig2AxesSpecTextRight,'UpDown',           +1);
setappdata(T.hFig2AxesSpecTextLeft, 'UpDown',           -1);
setappdata(T.hFig2AxesSpecTextRight,'SpecH',            T.hFig2AxesSpec);
setappdata(T.hFig2AxesSpecTextLeft, 'SpecH',            T.hFig2AxesSpec);
setappdata(T.hFig2AxesSpecTextRight,'TuningH',          T.hFig2AxesTuneImage);
setappdata(T.hFig2AxesSpecTextLeft, 'TuningH',          T.hFig2AxesTuneImage);
setappdata(T.hFig2AxesSpec,         'SpecNum',          D.N_Qfc);
setappdata(T.hFig2AxesSpec,         'SpecAmp',          single(D.PtQt_FFTAmp));
setappdata(T.hFig2AxesSpec,         'SpecAgl',          single(D.PtQt_FFTAgl));
setappdata(T.hFig2AxesSpec,         'SpecDotH',         T.hFig2AxesSpecDot);
setappdata(T.hFig2AxesSpec,         'SpecRepNumH',      T.hFig2AxesSpecTextNum);
setappdata(T.hFig2AxesSpec,         'SpecSesDurTotal',  S.SesDurTotal);
setappdata(T.hFig2AxesSpec,         'Spec_N_Qfc',       D.N_Qfc);
setappdata(T.hFig2AxesSpec,         'Spec_RatioCut_Qfc',S.TrlDurPreStim/S.TrlDurTotal);
setappdata(T.hFig2AxesSpec,         'HistH',            T.hFig2AxesHist);
setappdata(T.hFig2AxesSpec,         'HistogramH',       T.hFig2AxesHistHistogram);

% Axes: Tune 
setappdata(T.hFig2SpecScalebarHue,  'TuningH',          T.hFig2AxesTuneImage);
setappdata(T.hFig2SpecScalebarSat,  'TuningH',          T.hFig2AxesTuneImage);
setappdata(T.hFig2SpecScalebarVal,  'TuningH',          T.hFig2AxesTuneImage);           
setappdata(T.hFig2AxesTuneImage,    'AxesPixlH',        T.hFig2AxesPixl);         
setappdata(T.hFig2AxesTuneImage,    'RawHue',           single(D.PtOne_Hue));
setappdata(T.hFig2AxesTuneImage,    'RawSat',           single(D.PtOne_Saturation));
setappdata(T.hFig2AxesTuneImage,    'RawVal',           single(D.PtOne_Value));
setappdata(T.hFig2AxesTuneImage,    'HueMapOptions', {  'HSLuvCircular',...
                                                        'HSLuvLinear'});        % 'HSLuvZigZag'
setappdata(T.hFig2AxesTuneImage,    'HueMapOrder',      1);
setappdata(T.hFig2AxesTuneImage,    'HueMap',           'HSLuvCircular');
setappdata(T.hFig2AxesTuneImage,    'HueTempolate',     []);
setappdata(T.hFig2AxesTuneImage,    'HueColorMap',      []);
setappdata(T.hFig2AxesTuneImage,    'HueAxesH',         T.hFig2AxesTuneFakeHue);    
setappdata(T.hFig2AxesTuneImage,    'SatParaRange', [   0   0   0   0   1   1   1;
                                                        1   1   1   0   0   1   1;
                                                        0   0.6 -10 0   0   0.6 0]);
setappdata(T.hFig2AxesTuneImage,    'SatParaOrder',     1);
setappdata(T.hFig2AxesTuneImage,    'SatValSync',       0);
setappdata(T.hFig2AxesTuneImage,    'SatGroundOut',     1);
setappdata(T.hFig2AxesTuneImage,	'SatGroundTime',	0);
setappdata(T.hFig2AxesTuneImage,    'SatStimTime',      S.TrlDurStim);
setappdata(T.hFig2AxesTuneImage,    'ValLimRange',      0.025/100*2.^(0:0.5:7));
setappdata(T.hFig2AxesTuneImage,    'ValLimOrder',      5); 
setappdata(T.hFig2AxesTuneImage,	'ValLim',           0.1/100);   
        
% Axes: Frme
setappdata(T.hFig2AxesFrmeImage,	'FrmeNum',          1);
setappdata(T.hFig2AxesFrmeImage,    'FptPhPw_NormTrlVid', single(D.FptPhPw_NormTrlVid));
setappdata(T.hFig2AxesFrmeImage,    'XLabelH',          T.hFig2AxesFrmeXLabelH);         
setappdata(T.hFig2AxesFrmeImage,    'AxesPixlH',        T.hFig2AxesPixl);      
setappdata(T.hFig2AxesFrmeScalebar, 'Tmax',             0.2); 
setappdata(T.hFig2AxesFrmeScalebar, 'TmaxRange',        [   0.005   0.01    0.02 ...
                                                            0.05    0.1     0.2]); 
setappdata(T.hFig2AxesFrmeScalebar, 'AxesFrmeH',        T.hFig2AxesFrme); 
setappdata(T.hFig2AxesFrmeScalebar, 'AxesTempH',        T.hFig2AxesTemp); 
setappdata(T.hFig2AxesFrmeScalebar, 'AxesPixlH',        T.hFig2AxesPixl); 
setappdata(T.hFig2AxesFrmeTitle,    'FrmeNextH',        T.hFig2AxesTempTextRight);
setappdata(T.hFig2AxesFrmeTitle,    'PlayingNow',       0);
setappdata(T.hFig2AxesFrmeTitle,    'Sound',            S.SesSoundWave);   

% Axes: Pixl
setappdata(T.hFig2AxesPixl,         'FptCtPhPw_NormTrl',single(D.FptCtPhPw_NormTrl));
setappdata(T.hFig2AxesPixl,         'LineAllH',         T.hFig2AxesPixlLineAll);
setappdata(T.hFig2AxesPixl,         'LineMeanH',        T.hFig2AxesPixlLineMean);

% Axes: Temp
setappdata(T.hFig2AxesTempTextRight,'UpDown',           +1);
setappdata(T.hFig2AxesTempTextLeft, 'UpDown',           -1);
setappdata(T.hFig2AxesTempTextRight,'TempHidH',         T.hFig2AxesTempHid);
setappdata(T.hFig2AxesTempTextLeft, 'TempHidH',         T.hFig2AxesTempHid);
setappdata(T.hFig2AxesTempTextRight,'FrmeImageH',       T.hFig2AxesFrmeImage);
setappdata(T.hFig2AxesTempTextLeft, 'FrmeImageH',       T.hFig2AxesFrmeImage);

setappdata(T.hFig2AxesTempHid,      'TempDotH',         T.hFig2AxesTempDot);
setappdata(T.hFig2AxesTempHid,      'TempTextH',        T.hFig2AxesTempTextNum);
setappdata(T.hFig2AxesTempHid,      'FrmeDuration',     P.ProcFrameBinNum/80);

% Updates
% drawnow;                                  
XinRanAnalysis2_Sweep_ButtonDown(T.hFig2SpecScalebarHue);         
XinRanAnalysis2_Sweep_ButtonDown(T.hFig2SpecScalebarSat);       
XinRanAnalysis2_Sweep_ButtonDown(T.hFig2SpecScalebarVal); 
XinRanAnalysis2_Sweep_ButtonDown(T.hFig2AxesFrmeScalebar);  

%% Save
% savefig(T.hFig(2), [F.PathName,A.FileName{1}(1:end-4) '_Sweep.fig'], 'compact');
